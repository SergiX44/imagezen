"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[7162],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>d});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),m=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=m(e.components);return a.createElement(s.Provider,{value:t},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},g=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),p=m(n),g=r,d=p["".concat(s,".").concat(g)]||p[g]||u[g]||o;return n?a.createElement(d,i(i({ref:t},c),{},{components:n})):a.createElement(d,i({ref:t},c))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=g;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[p]="string"==typeof e?e:r,i[1]=l;for(var m=2;m<o;m++)i[m]=n[m];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}g.displayName="MDXCreateElement"},9390:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>l,toc:()=>m});var a=n(7462),r=(n(7294),n(3905));const o={sidebar_position:1},i="Getting Started",l={unversionedId:"getting-started",id:"getting-started",title:"Getting Started",description:"Why ImageZen?",source:"@site/docs/getting-started.md",sourceDirName:".",slug:"/getting-started",permalink:"/imagezen/docs/getting-started",draft:!1,editUrl:"https://github.com/sergix44/imagezen/tree/master/docs/docs/getting-started.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",next:{title:"Supported Formats",permalink:"/imagezen/docs/supported-formats"}},s={},m=[{value:"Why ImageZen?",id:"why-imagezen",level:2},{value:"Installation",id:"installation",level:2},{value:"Basic Usage",id:"basic-usage",level:2},{value:"Colors",id:"colors",level:2}],c={toc:m},p="wrapper";function u(e){let{components:t,...n}=e;return(0,r.kt)(p,(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"getting-started"},"Getting Started"),(0,r.kt)("h2",{id:"why-imagezen"},"Why ImageZen?"),(0,r.kt)("p",null,"ImageZen is a PHP image manipulation library that is designed to be simple and easy to use. It's built to be fast and\nlightweight, and it's focused on doing one thing and doing it well: image manipulation."),(0,r.kt)("p",null,"ImageZen is a refactored fork of the popular ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/intervention/image"},"Intervention Image")," library, it's\nfully compatible with PHP 8 and named arguments. It also has some new features and improvements."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Driver Switch"),": You can easily switch between GD and Imagick drivers, ImageZen will take care of converting from\none to another. See ",(0,r.kt)("a",{parentName:"li",href:"/docs/supported-formats#switching-backends-on-the-fly"},"Driver Switching")," for more information."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Extensible"),": ImageZen is designed to be extended and customised, so you can easily add your own image manipulation\nfunctionality. See ",(0,r.kt)("a",{parentName:"li",href:"/docs/extend"},"Custom Alterations")," for more information."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Fast"),": Some alteration has been refactored to be faster than the original library."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Strict Types"),": ImageZen is fully typed, so you can use it in your typed projects without any problem.")),(0,r.kt)("h2",{id:"installation"},"Installation"),(0,r.kt)("p",null,"Install the package from Composer:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"composer require sergix44/imagezen\n")),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"ImageZen requires PHP 8.2 or higher.")),(0,r.kt)("h2",{id:"basic-usage"},"Basic Usage"),(0,r.kt)("p",null,"Basically all you need to do is to create an instance of the ",(0,r.kt)("inlineCode",{parentName:"p"},"Image")," class:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"use SergiX44\\ImageZen\\Image;\n\n$image = Image::make('path/to/image.jpg');\n")),(0,r.kt)("p",null,"Basically almost every method call returns the same instance, so you can chain them:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"\nuse SergiX44\\ImageZen\\Image;\nuse SergiX44\\ImageZen\\Format;\n\n$image = Image::make('path/to/image.jpg')\n    ->resize(300, 200)\n    ->greyscale()\n    ->blur(10);\n    \n$image->save('path/to/destination.png', Format::PNG);\n$mime = $image->mime();\n")),(0,r.kt)("p",null,"You can see all the available methods in the ",(0,r.kt)("a",{parentName:"p",href:"/docs/category/available-methods"},"API Reference"),"."),(0,r.kt)("h2",{id:"colors"},"Colors"),(0,r.kt)("p",null,"ImageZen supports different color formats as input, managed by the ",(0,r.kt)("inlineCode",{parentName:"p"},"SergiX44\\ImageZen\\Color")," class, here an example:\nThey gets automatically converted to the backend format, so you don't have to worry about it."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"use SergiX44\\ImageZen\\Draws\\Color;\n\n$color = Color::from('#ff0000');\n$color = Color::from('#f00');\n\n$color = Color::rgb(255, 0, 0);\n$color= Color::rgba(255, 0, 0, 0.5);\n\n\n// has also a variety of built-in colors\n$color = Color::transparent();\n$color = Color::black();\n$color = Color::white();\n$color = Color::red();\n// ...\n\n")))}u.isMDXComponent=!0}}]);